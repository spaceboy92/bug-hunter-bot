import { AnalyzedSite } from '../constants';

const CLICKUP_API_BASE = 'https://api.clickup.com/api/v2';

const handleApiError = async (response: Response, context: string): Promise<Error> => {
    if (response.status === 401) {
        return new Error(`ClickUp API Error: Unauthorized. Please check your API token. (Context: ${context})`);
    }
    try {
        const errJson = await response.json();
        const message = errJson.err || `HTTP Error ${response.status}`;
        return new Error(`ClickUp API Error: ${message} (Context: ${context})`);
    } catch (e) {
        return new Error(`ClickUp API Error: An unknown error occurred (Status: ${response.status}). (Context: ${context})`);
    }
};

export const createClickUpTask = async (
    token: string,
    listId: string,
    site: AnalyzedSite,
    reporterCredit: string
): Promise<{ id: string }> => {
    const url = `${CLICKUP_API_BASE}/list/${listId}/task`;
    const body = {
        name: `Bug Report: ${site.title}`,
        description: `Automated bug report for: ${site.url}\n\nReport generated by Bug Hunter Bot.\n${reporterCredit}`,
        // Add any other fields you want here, like priority, tags, etc.
    };

    const response = await fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': token,
        },
        body: JSON.stringify(body),
    });

    if (!response.ok) {
        throw await handleApiError(response, 'creating task');
    }
    return response.json();
};

export const uploadAttachmentToClickUpTask = async (
    token: string,
    taskId: string,
    pdfBlob: Blob,
    fileName: string
): Promise<void> => {
    // Note: ClickUp API has CORS issues with direct browser uploads for some users/plans.
    // A proxy might be needed if this fails. The API documentation is unclear on browser-based file uploads via Authorization header.
    // We are proceeding with the standard approach.
    const url = `${CLICKUP_API_BASE}/task/${taskId}/attachment`;
    
    const formData = new FormData();
    formData.append('attachment', pdfBlob, fileName);
    // The filename is required by the API for the `attachment` part
    // formData.append('filename', fileName); is not the correct way for FormData file uploads

    const response = await fetch(url, {
        method: 'POST',
        headers: {
            'Authorization': token,
        },
        body: formData,
    });

    if (!response.ok) {
        throw await handleApiError(response, 'uploading attachment');
    }
    // The response is often empty on success
};